
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isUserSelf(userId) {
      return request.auth.uid == userId;
    }
    
    function isStableOwner(stableId) {
      // Ensure the stable document exists before trying to access its data
      let stableDoc = get(/databases/$(database)/documents/stables/$(stableId));
      return stableDoc.exists && request.auth.uid == stableDoc.data.ownerId;
    }

    function isStableMember(stableId) {
      // Ensure the stable document exists before trying to access its data
      let stableDoc = get(/databases/$(database)/documents/stables/$(stableId));
      // Check if the members field exists and is a list before calling hasAny
      return stableDoc.exists && 
             stableDoc.data.members is list && // Ensure 'members' is a list
             stableDoc.data.members.hasAny([request.auth.uid]);
    }
    
    // Checks if an update operation only changes fields that are in the allowedFields list.
    function isUpdatingOnlyAllowedFields(allowedFields) {
      // Ensure that only fields from the allowedFields list are being changed.
      // request.resource.data is the new state, resource.data is the old state.
      // .diff(resource.data) gives us what changed.
      // .affectedKeys() gives us the set of keys that were changed.
      // .hasOnly() checks if this set of changed keys is a subset of or equal to allowedFields.
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allowedFields);
    }

    // --- User Profiles ---
    match /users/{userId} {
      allow read: if isUserAuthenticated();

      allow create: if isUserSelf(userId) &&
                       request.resource.data.uid == userId &&
                       // On self-creation, user cannot set stable details or pending requests.
                       // Role can be set if it's one of the valid initial roles.
                       request.resource.data.stableId == null &&
                       request.resource.data.stableName == null &&
                       request.resource.data.requestedStableId == null &&
                       (request.resource.data.role == 'jinete' || request.resource.data.role == 'jefe de cuadra' || request.resource.data.role == null);
                       // displayName, email, photoURL, dataAiHint are implicitly allowed if not restricted here
                       // and are set by the client or auth triggers.

      allow update: if isUserAuthenticated() &&
        // Case 1: User is updating their own profile
        (
          isUserSelf(userId) &&
          isUpdatingOnlyAllowedFields([
            'displayName', 'photoURL', 'dataAiHint', 'role', 'requestedStableId'
          ]) &&
          // User cannot change their own UID or email via update
          request.resource.data.uid == resource.data.uid &&
          request.resource.data.email == resource.data.email &&
          // If role is being changed by user:
          // - It must be from null (initial selection).
          // - Or, if already set, it cannot be changed by the user (remains the same).
          (request.writeFields.hasAny(['role']) ? 
            (
              (resource.data.role == null && (request.resource.data.role == 'jinete' || request.resource.data.role == 'jefe de cuadra')) ||
              (request.resource.data.role == resource.data.role) 
            )
            : true // Role not being changed
          ) &&
          // If requestedStableId is being set by user, user must not already be in a stable
          // and must not have another pending request to a *different* stable.
          // User can clear their own requestedStableId.
          (request.writeFields.hasAny(['requestedStableId']) ? 
            (
              (resource.data.stableId == null && (resource.data.requestedStableId == null || request.resource.data.requestedStableId == null) ) 
            )
            : true // requestedStableId not being changed
          )
        ) ||
        // Case 2: Stable owner is accepting or managing a user in their stable
        (
          resource.data.requestedStableId != null && // User must have a pending request to a stable
          isStableOwner(resource.data.requestedStableId) && // Current auth user must be owner of THAT stable
          request.auth.uid == get(/databases/$(database)/documents/stables/$(resource.data.requestedStableId)).data.ownerId && // Double check ownership via get()
          // Stable owner can only update these specific fields for the user they are accepting
          isUpdatingOnlyAllowedFields([
            'stableId', 'stableName', 'requestedStableId', 'role'
          ]) &&
          // Ensure critical fields are not changed by stable owner during acceptance
          request.resource.data.uid == resource.data.uid &&
          request.resource.data.email == resource.data.email &&
          // Role can be updated by owner (e.g. from null or ensuring it's 'jinete' or 'jefe de cuadra')
          (request.writeFields.hasAny(['role']) ? 
            (request.resource.data.role == 'jinete' || request.resource.data.role == 'jefe de cuadra') 
            : true // Role not being changed
          ) &&
          // StableId being set must match the stable they requested
          request.resource.data.stableId == resource.data.requestedStableId &&
          // requestedStableId must be set to null by the owner upon acceptance
          request.resource.data.requestedStableId == null 
        );
        
      allow delete: if isUserSelf(userId);
    }

    // --- Stables ---
    match /stables/{stableId} {
      allow read: if isUserAuthenticated(); 
      
      allow create: if isUserAuthenticated() &&
                       request.auth.uid == request.resource.data.ownerId && 
                       request.resource.data.members is list &&
                       request.resource.data.members.hasAny([request.auth.uid]) && 
                       request.resource.data.pendingMembers is list;

      allow update: if isUserAuthenticated() &&
                       ( 
                         isStableOwner(stableId) || // Owner can update anything (e.g. add members, remove pending, change name)
                         ( 
                           !isStableOwner(stableId) && // Non-owner making a request to join
                           isUpdatingOnlyAllowedFields(['pendingMembers']) // Can only add self to pendingMembers
                         )
                       );
      
      allow delete: if isStableOwner(stableId);
    }

    // --- Tasks ---
    match /tasks/{taskId} {
      allow read: if isUserAuthenticated() && isStableMember(resource.data.stableId);

      allow create: if isUserAuthenticated() &&
                       request.resource.data.stableId != null &&
                       isStableMember(request.resource.data.stableId); 

      allow update: if isUserAuthenticated() &&
                       isStableMember(resource.data.stableId) &&
                       ( 
                         isStableOwner(resource.data.stableId) || // Owner can update
                         ( // Member can update completion fields if assigned or general task
                           (resource.data.assignedTo == request.auth.uid ||
                            resource.data.assignmentScope == 'ANYONE_IN_STABLE' ||
                            resource.data.assignmentScope == 'ALL_MEMBERS_INDIVIDUALLY'
                           ) &&
                           isUpdatingOnlyAllowedFields(['isCompleted', 'completedBy', 'completedAt', 'updatedAt']) &&
                           // If completedBy is being set, it must be the current user's UID
                           (!request.writeFields.hasAny(['completedBy']) || request.resource.data.completedBy == request.auth.uid)
                         )
                       );

      allow delete: if isUserAuthenticated() && isStableOwner(resource.data.stableId);
    }

    // --- Horse Assignments ---
    match /horseAssignments/{assignmentId} {
      allow read: if isUserAuthenticated() && isStableMember(resource.data.stableId);

      allow create: if isUserAuthenticated() &&
                         request.resource.data.stableId != null &&
                         isStableMember(request.resource.data.stableId);

      allow update: if isUserAuthenticated() &&
                       isStableMember(resource.data.stableId) && 
                       ( 
                         isStableOwner(resource.data.stableId) || // Owner can update
                         ( // Assigned rider can update completion fields for themselves
                           resource.data.jineteId == request.auth.uid &&
                           isUpdatingOnlyAllowedFields(['isCompleted', 'completedBy', 'completedAt', 'updatedAt']) &&
                           (!request.writeFields.hasAny(['completedBy']) || request.resource.data.completedBy == request.auth.uid)
                         )
                       );

      allow delete: if isUserAuthenticated() && isStableOwner(resource.data.stableId);
    }
    
    // --- Horses ---
    match /horses/{horseId} {
      allow read: if isUserAuthenticated() && isStableMember(resource.data.stableId);
      
      allow create: if isUserAuthenticated() &&
                       request.resource.data.stableId != null &&
                       isStableMember(request.resource.data.stableId); 
      
      allow update, delete: if isUserAuthenticated() && 
                               isStableOwner(resource.data.stableId); 
    }
  }
}

    